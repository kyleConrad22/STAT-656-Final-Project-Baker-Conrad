}
parameters {
vector[K] beta[J];            // indiv coeffs by group
matrix[L, K] gamma;           // group coeffs
corr_matrix[K] Omega;         // prior correlation
vector<lower=0>[K] tau;       // prior scale
real<lower=0> sigma;          // prediction error scale
}
model {
tau ~ cauchy(0, 2.5);
Omega ~ lkj_corr(2);
to_vector(gamma) ~ normal(0, 2);
{
row_vector[K] u_gamma[J];
for (j in 1:J)
u_gamma[j] = u[j] * gamma;
beta ~ multi_normal(u_gamma, quad_form_diag(Omega, tau));
}
{
vector[N] x_beta_jj;
for (n in 1:N)
x_beta_jj[n] = x[n] * beta[jj[n]];
y ~ normal(x_beta_jj, sigma);
}
}
"
simp_norm_hier = stan_model(model_code = simp_reg_code)
hier_data <- list(N = nrow(X), K = ncol(X), J = length(unique(annuals_biomass$site_code)), L = 1, jj = annuals_biomass$site_code_int, x = X, u = matrix(rep(1, length(unique(annuals_biomass$site_code))), nrow = length(unique(annuals_biomass$site_code))), y = Y)
nfit <- sampling(simp_norm_hier, data = hier_data, iter= 3000, warmup = 1500, chains=1)
noncent_hier <- stan_model(model_code = noncent_hier_code)
noncent_hier_code <- "
data {
int<lower=0> N;               // num individuals
int<lower=1> K;               // num ind predictors
int<lower=1> J;               // num groups
int<lower=1> L;               // num group predictors
int<lower=1,upper=J> jj[N];   // group for individual
matrix[N, K] x;               // individual predictors
row_vector[L] u[J];           // group predictors
vector[N] y;                  // outcomes
}
parameters {
vector[K] alpha[J];           // indiv coeffs by group (reparam)
matrix[L, K] gamma;           // group coeffs
corr_matrix[K] Omega;         // prior correlation
vector<lower=0>[K] tau;       // prior scale
real<lower=0> sigma;          // prediction error scale
}
transformed parameters {
vector[K] beta[J];            // Individual Coeffs by group
for (j in 1:J)
beta[j,] = (u[j] * gamma) + (alpha[j,]*quad_form_diag(Omega, tau));
}
model {
tau ~ cauchy(0, 2.5);
Omega ~ lkj_corr(2);
to_vector(gamma) ~ normal(0, 2);
sigma ~ inv_gamma(.1, .1)
for (j in 1:J) {
alpha[j,] ~ normal(0,1)
}
{
vector[N] x_beta_jj;
for (n in 1:N)
x_beta_jj[n] = x[n] * beta[jj[n]];
y ~ normal(x_beta_jj, sigma);
}
}
"
noncent_hier <- stan_model(model_code = noncent_hier_code)
noncent_hier_code <- "
data {
int<lower=0> N;               // num individuals
int<lower=1> K;               // num ind predictors
int<lower=1> J;               // num groups
int<lower=1> L;               // num group predictors
int<lower=1,upper=J> jj[N];   // group for individual
matrix[N, K] x;               // individual predictors
row_vector[L] u[J];           // group predictors
vector[N] y;                  // outcomes
}
parameters {
vector[K] alpha[J];           // indiv coeffs by group (reparam)
matrix[L, K] gamma;           // group coeffs
corr_matrix[K] Omega;         // prior correlation
vector<lower=0>[K] tau;       // prior scale
real<lower=0> sigma;          // prediction error scale
}
transformed parameters {
vector[K] beta[J];            // Individual Coeffs by group
for (j in 1:J)
beta[j,] = (u[j] * gamma) + (alpha[j] * quad_form_diag(Omega, tau));
}
model {
tau ~ cauchy(0, 2.5);
Omega ~ lkj_corr(2);
to_vector(gamma) ~ normal(0, 2);
sigma ~ inv_gamma(.1, .1)
for (j in 1:J) {
alpha[j,] ~ normal(0,1)
}
{
vector[N] x_beta_jj;
for (n in 1:N)
x_beta_jj[n] = x[n] * beta[jj[n]];
y ~ normal(x_beta_jj, sigma);
}
}
"
noncent_hier <- stan_model(model_code = noncent_hier_code)
noncent_hier_code <- "
data {
int<lower=0> N;               // num individuals
int<lower=1> K;               // num ind predictors
int<lower=1> J;               // num groups
int<lower=1> L;               // num group predictors
int<lower=1,upper=J> jj[N];   // group for individual
matrix[N, K] x;               // individual predictors
row_vector[L] u[J];           // group predictors
vector[N] y;                  // outcomes
}
parameters {
vector[K] alpha[J];           // indiv coeffs by group (reparam)
matrix[L, K] gamma;           // group coeffs
corr_matrix[K] Omega;         // prior correlation
vector<lower=0>[K] tau;       // prior scale
real<lower=0> sigma;          // prediction error scale
}
transformed parameters {
vector[K] beta[J];            // Individual Coeffs by group
for (j in 1:J)
beta[j,] = (u[j] * gamma) + alpha[j] * quad_form_diag(Omega, tau);
}
model {
tau ~ cauchy(0, 2.5);
Omega ~ lkj_corr(2);
to_vector(gamma) ~ normal(0, 2);
sigma ~ inv_gamma(.1, .1)
for (j in 1:J) {
alpha[j,] ~ normal(0,1)
}
{
vector[N] x_beta_jj;
for (n in 1:N)
x_beta_jj[n] = x[n] * beta[jj[n]];
y ~ normal(x_beta_jj, sigma);
}
}
"
noncent_hier <- stan_model(model_code = noncent_hier_code)
noncent_hier_code <- "
data {
int<lower=0> N;               // num individuals
int<lower=1> K;               // num ind predictors
int<lower=1> J;               // num groups
int<lower=1> L;               // num group predictors
int<lower=1,upper=J> jj[N];   // group for individual
matrix[N, K] x;               // individual predictors
row_vector[L] u[J];           // group predictors
vector[N] y;                  // outcomes
}
parameters {
vector[K] alpha[J];           // indiv coeffs by group (reparam)
matrix[L, K] gamma;           // group coeffs
corr_matrix[K] Omega;         // prior correlation
vector<lower=0>[K] tau;       // prior scale
real<lower=0> sigma;          // prediction error scale
}
transformed parameters {
vector[K] beta[J];            // Individual Coeffs by group
for (j in 1:J)
beta[j] = (u[j] * gamma) + (alpha[j] * quad_form_diag(Omega, tau));
}
model {
tau ~ cauchy(0, 2.5);
Omega ~ lkj_corr(2);
to_vector(gamma) ~ normal(0, 2);
sigma ~ inv_gamma(.1, .1)
for (j in 1:J) {
alpha[j,] ~ normal(0,1)
}
{
vector[N] x_beta_jj;
for (n in 1:N)
x_beta_jj[n] = x[n] * beta[jj[n]];
y ~ normal(x_beta_jj, sigma);
}
}
"
noncent_hier <- stan_model(model_code = noncent_hier_code)
noncent_hier_code <- "
data {
int<lower=0> N;               // num individuals
int<lower=1> K;               // num ind predictors
int<lower=1> J;               // num groups
int<lower=1> L;               // num group predictors
int<lower=1,upper=J> jj[N];   // group for individual
matrix[N, K] x;               // individual predictors
row_vector[L] u[J];           // group predictors
vector[N] y;                  // outcomes
}
parameters {
vector[K] alpha[J];           // indiv coeffs by group (reparam)
matrix[L, K] gamma;           // group coeffs
corr_matrix[K] Omega;         // prior correlation
vector<lower=0>[K] tau;       // prior scale
real<lower=0> sigma;          // prediction error scale
}
transformed parameters {
vector[K] beta[J];            // Individual Coeffs by group
for (j in 1:J)
beta[j] = (u[j] * gamma) + (quad_form_diag(Omega, tau) * alpha[j]);
}
model {
tau ~ cauchy(0, 2.5);
Omega ~ lkj_corr(2);
to_vector(gamma) ~ normal(0, 2);
sigma ~ inv_gamma(.1, .1)
for (j in 1:J) {
alpha[j,] ~ normal(0,1)
}
{
vector[N] x_beta_jj;
for (n in 1:N)
x_beta_jj[n] = x[n] * beta[jj[n]];
y ~ normal(x_beta_jj, sigma);
}
}
"
noncent_hier <- stan_model(model_code = noncent_hier_code)
beta[j] = (u[j] * gamma) + (alpha[j] * to_vector(quad_form_diag(Omega, tau)));
noncent_hier_code <- "
data {
int<lower=0> N;               // num individuals
int<lower=1> K;               // num ind predictors
int<lower=1> J;               // num groups
int<lower=1> L;               // num group predictors
int<lower=1,upper=J> jj[N];   // group for individual
matrix[N, K] x;               // individual predictors
row_vector[L] u[J];           // group predictors
vector[N] y;                  // outcomes
}
parameters {
vector[K] alpha[J];           // indiv coeffs by group (reparam)
matrix[L, K] gamma;           // group coeffs
corr_matrix[K] Omega;         // prior correlation
vector<lower=0>[K] tau;       // prior scale
real<lower=0> sigma;          // prediction error scale
}
transformed parameters {
vector[K] beta[J];            // Individual Coeffs by group
for (j in 1:J)
beta[j] = (u[j] * gamma) + (alpha[j] * to_vector(quad_form_diag(Omega, tau)));
}
model {
tau ~ cauchy(0, 2.5);
Omega ~ lkj_corr(2);
to_vector(gamma) ~ normal(0, 2);
sigma ~ inv_gamma(.1, .1)
for (j in 1:J) {
alpha[j,] ~ normal(0,1)
}
{
vector[N] x_beta_jj;
for (n in 1:N)
x_beta_jj[n] = x[n] * beta[jj[n]];
y ~ normal(x_beta_jj, sigma);
}
}
"
noncent_hier <- stan_model(model_code = noncent_hier_code)
noncent_hier_code <- "
data {
int<lower=0> N;               // num individuals
int<lower=1> K;               // num ind predictors
int<lower=1> J;               // num groups
int<lower=1> L;               // num group predictors
int<lower=1,upper=J> jj[N];   // group for individual
matrix[N, K] x;               // individual predictors
row_vector[L] u[J];           // group predictors
vector[N] y;                  // outcomes
}
parameters {
vector[K] alpha[J];           // indiv coeffs by group (reparam)
matrix[L, K] gamma;           // group coeffs
corr_matrix[K] Omega;         // prior correlation
vector<lower=0>[K] tau;       // prior scale
real<lower=0> sigma;          // prediction error scale
}
transformed parameters {
vector[K] beta[J];            // Individual Coeffs by group
for (j in 1:J)
beta[j] = (u[j] * gamma) + (alpha[j] * to_row_vector(quad_form_diag(Omega, tau)));
}
model {
tau ~ cauchy(0, 2.5);
Omega ~ lkj_corr(2);
to_vector(gamma) ~ normal(0, 2);
sigma ~ inv_gamma(.1, .1)
for (j in 1:J) {
alpha[j,] ~ normal(0,1)
}
{
vector[N] x_beta_jj;
for (n in 1:N)
x_beta_jj[n] = x[n] * beta[jj[n]];
y ~ normal(x_beta_jj, sigma);
}
}
"
noncent_hier <- stan_model(model_code = noncent_hier_code)
noncent_hier_code <- "
data {
int<lower=0> N;               // num individuals
int<lower=1> K;               // num ind predictors
int<lower=1> J;               // num groups
int<lower=1> L;               // num group predictors
int<lower=1,upper=J> jj[N];   // group for individual
matrix[N, K] x;               // individual predictors
row_vector[L] u[J];           // group predictors
vector[N] y;                  // outcomes
}
parameters {
vector[K] alpha[J];           // indiv coeffs by group (reparam)
matrix[L, K] gamma;           // group coeffs
corr_matrix[K] Omega;         // prior correlation
vector<lower=0>[K] tau;       // prior scale
real<lower=0> sigma;          // prediction error scale
}
transformed parameters {
vector[K] beta[J];            // Individual Coeffs by group
for (j in 1:J)
beta[j] = (u[j] * gamma) + (quad_form_diag(Omega, tau) * alpha[j]);
}
model {
tau ~ cauchy(0, 2.5);
Omega ~ lkj_corr(2);
to_vector(gamma) ~ normal(0, 2);
sigma ~ inv_gamma(.1, .1)
for (j in 1:J) {
alpha[j,] ~ normal(0,1)
}
{
vector[N] x_beta_jj;
for (n in 1:N)
x_beta_jj[n] = x[n] * beta[jj[n]];
y ~ normal(x_beta_jj, sigma);
}
}
"
noncent_hier <- stan_model(model_code = noncent_hier_code)
noncent_hier_code <- "
data {
int<lower=0> N;               // num individuals
int<lower=1> K;               // num ind predictors
int<lower=1> J;               // num groups
int<lower=1> L;               // num group predictors
int<lower=1,upper=J> jj[N];   // group for individual
matrix[N, K] x;               // individual predictors
row_vector[L] u[J];           // group predictors
vector[N] y;                  // outcomes
}
parameters {
vector[K] alpha[J];           // indiv coeffs by group (reparam)
matrix[L, K] gamma;           // group coeffs
corr_matrix[K] Omega;         // prior correlation
vector<lower=0>[K] tau;       // prior scale
real<lower=0> sigma;          // prediction error scale
}
transformed parameters {
vector[K] beta[J];            // Individual Coeffs by group
for (j in 1:J)
beta[j] = (u[j] * gamma) + to_row_vector(quad_form_diag(Omega, tau) * alpha[j]);
}
model {
tau ~ cauchy(0, 2.5);
Omega ~ lkj_corr(2);
to_vector(gamma) ~ normal(0, 2);
sigma ~ inv_gamma(.1, .1)
for (j in 1:J) {
alpha[j,] ~ normal(0,1)
}
{
vector[N] x_beta_jj;
for (n in 1:N)
x_beta_jj[n] = x[n] * beta[jj[n]];
y ~ normal(x_beta_jj, sigma);
}
}
"
noncent_hier <- stan_model(model_code = noncent_hier_code)
noncent_hier_code <- "
data {
int<lower=0> N;               // num individuals
int<lower=1> K;               // num ind predictors
int<lower=1> J;               // num groups
int<lower=1> L;               // num group predictors
int<lower=1,upper=J> jj[N];   // group for individual
matrix[N, K] x;               // individual predictors
row_vector[L] u[J];           // group predictors
vector[N] y;                  // outcomes
}
parameters {
vector[K] alpha[J];           // indiv coeffs by group (reparam)
matrix[L, K] gamma;           // group coeffs
corr_matrix[K] Omega;         // prior correlation
vector<lower=0>[K] tau;       // prior scale
real<lower=0> sigma;          // prediction error scale
}
transformed parameters {
vector[K] beta[J];            // Individual Coeffs by group
for (j in 1:J)
beta[j] = to_vector(u[j] * gamma) + (quad_form_diag(Omega, tau) * alpha[j]);
}
model {
tau ~ cauchy(0, 2.5);
Omega ~ lkj_corr(2);
to_vector(gamma) ~ normal(0, 2);
sigma ~ inv_gamma(.1, .1)
for (j in 1:J) {
alpha[j,] ~ normal(0,1)
}
{
vector[N] x_beta_jj;
for (n in 1:N)
x_beta_jj[n] = x[n] * beta[jj[n]];
y ~ normal(x_beta_jj, sigma);
}
}
"
noncent_hier <- stan_model(model_code = noncent_hier_code)
noncent_hier_code <- "
data {
int<lower=0> N;               // num individuals
int<lower=1> K;               // num ind predictors
int<lower=1> J;               // num groups
int<lower=1> L;               // num group predictors
int<lower=1,upper=J> jj[N];   // group for individual
matrix[N, K] x;               // individual predictors
row_vector[L] u[J];           // group predictors
vector[N] y;                  // outcomes
}
parameters {
vector[K] alpha[J];           // indiv coeffs by group (reparam)
matrix[L, K] gamma;           // group coeffs
corr_matrix[K] Omega;         // prior correlation
vector<lower=0>[K] tau;       // prior scale
real<lower=0> sigma;          // prediction error scale
}
transformed parameters {
vector[K] beta[J];            // Individual Coeffs by group
for (j in 1:J)
beta[j] = to_vector(u[j] * gamma) + (quad_form_diag(Omega, tau) * alpha[j]);
}
model {
tau ~ cauchy(0, 2.5);
Omega ~ lkj_corr(2);
to_vector(gamma) ~ normal(0, 2);
sigma ~ inv_gamma(.1, .1)
for (j in 1:J) {
alpha[j] ~ normal(0,1)
}
{
vector[N] x_beta_jj;
for (n in 1:N)
x_beta_jj[n] = x[n] * beta[jj[n]];
y ~ normal(x_beta_jj, sigma);
}
}
"
noncent_hier <- stan_model(model_code = noncent_hier_code)
noncent_hier_code <- "
data {
int<lower=0> N;               // num individuals
int<lower=1> K;               // num ind predictors
int<lower=1> J;               // num groups
int<lower=1> L;               // num group predictors
int<lower=1,upper=J> jj[N];   // group for individual
matrix[N, K] x;               // individual predictors
row_vector[L] u[J];           // group predictors
vector[N] y;                  // outcomes
}
parameters {
vector[K] alpha[J];           // indiv coeffs by group (reparam)
matrix[L, K] gamma;           // group coeffs
corr_matrix[K] Omega;         // prior correlation
vector<lower=0>[K] tau;       // prior scale
real<lower=0> sigma;          // prediction error scale
}
transformed parameters {
vector[K] beta[J];            // Individual Coeffs by group
for (j in 1:J)
beta[j] = to_vector(u[j] * gamma) + (quad_form_diag(Omega, tau) * alpha[j]);
}
model {
tau ~ cauchy(0, 2.5);
Omega ~ lkj_corr(2);
to_vector(gamma) ~ normal(0, 2);
sigma ~ inv_gamma(.1, .1);
for (j in 1:J) {
alpha[j] ~ normal(0,1);
}
{
vector[N] x_beta_jj;
for (n in 1:N)
x_beta_jj[n] = x[n] * beta[jj[n]];
y ~ normal(x_beta_jj, sigma);
}
}
"
noncent_hier <- stan_model(model_code = noncent_hier_code)
b
